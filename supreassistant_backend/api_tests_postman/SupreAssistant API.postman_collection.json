{
	"info": {
		"_postman_id": "5ead34c9-f1ad-4bb2-9df5-a17b42a8cc57",
		"name": "SupreAssistant API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39858592"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user');",
							"    pm.expect(jsonData.user).to.have.property('email');",
							"    pm.expect(jsonData.user).to.have.property('name');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test29@example.com\",\n    \"password\": \"password123\",\n    \"username\": \"TestUser29\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"});",
							"",
							"pm.collectionVariables.set(\"authToken\", pm.response.json().token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"Tang1@a.com\",\n    \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has event data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('event');",
							"    pm.expect(jsonData.event).to.have.property('title');",
							"    pm.expect(jsonData.event).to.have.property('description');",
							"    pm.expect(jsonData.event).to.have.property('startTime');",
							"    pm.expect(jsonData.event).to.have.property('endTime');",
							"    ",
							"    // Store event ID for other tests",
							"    pm.collectionVariables.set(\"eventId\", jsonData.event.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Team Meeting\",\n    \"description\": \"Weekly team sync\",\n    \"startTime\": \"2024-03-20T10:00:00Z\",\n    \"endTime\": \"2024-03-20T11:00:00Z\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has events array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('events');",
							"    pm.expect(jsonData.events).to.be.an('array');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Event was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.event.title).to.equal('Updated Team Meeting');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Team Meeting\",\n    \"description\": \"Updated weekly team sync\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/events/{{eventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"{{eventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/c9e5a938-7f31-4326-8802-096993247acf",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"c9e5a938-7f31-4326-8802-096993247acf"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create/Update Companion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Companion was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.companion.name).to.equal('Updated Study Buddy');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // \"name\": \"Updated Study Buddy\",\n    // \"description\": \"Your enhanced study assistant\",\n    // \"instructions\": \"I am an improved study companion that helps with academic tasks\",\n    // \"model\": \"gpt-4o\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/companions/settings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"companions",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Chat History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has companions array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('companions');",
							"    pm.expect(jsonData.companions).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/companions/history",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"companions",
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has companion data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('companion');",
							"    pm.expect(jsonData.companion).to.have.property('id');",
							"    pm.expect(jsonData.companion).to.have.property('name');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    // \"message\": \"what future event do I have on my calendar?\"\n    // \"message\": \"Today is 2024 Nov Friday. Help me add an event -- third week of next month, five days later I need to study at home\"\n    \"message\": \"What date is today?\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/companions/chat",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"companions",
						"chat"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has note data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.note).to.have.property('title');",
							"    pm.expect(jsonData.note).to.have.property('content');",
							"    ",
							"    // Store note ID for other tests",
							"    pm.collectionVariables.set(\"noteId\", jsonData.note.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Meeting Notes\",\n    \"content\": \"Important points discussed during the team meeting.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has notes array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('notes');",
							"    pm.expect(jsonData.notes).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has note data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('note');",
							"    pm.expect(jsonData.note).to.have.property('title');",
							"    pm.expect(jsonData.note).to.have.property('content');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Note was updated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.note.title).to.equal('Updated Meeting Notes');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Meeting Notes\",\n    \"content\": \"Updated points from the team meeting.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Note was deleted\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.equal('Note deleted successfully.');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "eventIdToUpdate",
			"value": "",
			"type": "default"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "default"
		},
		{
			"key": "noteId",
			"value": "",
			"type": "default"
		}
	]
}